name: Codex CI Auto-Fix

# Trigger on push to main and all pull requests
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

jobs:
  rust-ci-with-codex:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      test_output: ${{ steps.test.outputs.result }}
      clippy_output: ${{ steps.clippy.outputs.result }}
      fmt_output: ${{ steps.fmt.outputs.result }}
      has_errors: ${{ steps.check_errors.outputs.has_errors }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Run tests and capture output
      - name: Run tests
        id: test
        continue-on-error: true
        run: |
          OUTPUT=$(cargo +nightly test --all-features 2>&1 || true)
          echo "$OUTPUT" > test-output.txt
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if cargo +nightly test --all-features 2>&1 | grep -q "test result: ok"; then
            exit 0
          else
            exit 1
          fi

      # Run clippy and capture output
      - name: Run clippy
        id: clippy
        continue-on-error: true
        run: |
          OUTPUT=$(cargo +nightly clippy --all-targets --all-features -- -D warnings 2>&1 || true)
          echo "$OUTPUT" > clippy-output.txt
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          cargo +nightly clippy --all-targets --all-features -- -D warnings

      # Check formatting
      - name: Check formatting
        id: fmt
        continue-on-error: true
        run: |
          OUTPUT=$(cargo +nightly fmt -- --check 2>&1 || true)
          echo "$OUTPUT" > fmt-output.txt
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          cargo +nightly fmt -- --check

      # Determine if there are any errors
      - name: Check for errors
        id: check_errors
        run: |
          if [ "${{ steps.test.outcome }}" = "failure" ] || \
             [ "${{ steps.clippy.outcome }}" = "failure" ] || \
             [ "${{ steps.fmt.outcome }}" = "failure" ]; then
            echo "has_errors=true" >> $GITHUB_OUTPUT
          else
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi

      # Upload output files as artifacts for Codex analysis
      - name: Upload CI outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-outputs
          path: |
            test-output.txt
            clippy-output.txt
            fmt-output.txt

  codex-analysis:
    runs-on: ubuntu-latest
    needs: rust-ci-with-codex
    if: needs.rust-ci-with-codex.outputs.has_errors == 'true'
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download CI outputs
        uses: actions/download-artifact@v4
        with:
          name: ci-outputs

      - name: Prepare context for Codex
        id: prepare_context
        run: |
          # Combine all outputs into a single context file
          {
            echo "=== PROJECT INFORMATION ==="
            echo "Repository: ${{ github.repository }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Event: ${{ github.event_name }}"
            echo ""
            echo "=== TEST OUTPUT ==="
            cat test-output.txt || echo "No test output"
            echo ""
            echo "=== CLIPPY OUTPUT ==="
            cat clippy-output.txt || echo "No clippy output"
            echo ""
            echo "=== FORMAT CHECK OUTPUT ==="
            cat fmt-output.txt || echo "No format check output"
          } > codex-context.txt

      - name: Analyze with Codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          working-directory: ${{ github.workspace }}
          safety-strategy: drop-sudo
          sandbox: read-only
          model: gpt-4-turbo
          prompt: |
            You are analyzing a Rust project that failed CI checks.

            PROJECT CONTEXT:
            - Repository: ${{ github.repository }}
            - Language: Rust (nightly toolchain, Edition 2024)
            - Framework: Axum 0.8 web framework
            - Purpose: Google Calendar MCP (Model Context Protocol) server
            - Key dependencies: rmcp, oauth2, reqwest, tokio

            TASK:
            Analyze the CI output below and provide:
            1. Root cause analysis of each failure
            2. Specific, actionable fixes with file paths and line numbers
            3. Explanation of why these issues occurred
            4. Rust-specific considerations (async/await, Edition 2024, nightly features)

            CI OUTPUT:
            $(cat codex-context.txt)

            FOCUS AREAS:
            - Nightly-specific issues (Edition 2024 compatibility)
            - Async/await patterns with Axum and Tokio
            - OAuth flow error handling
            - Type inference and lifetime issues
            - rmcp crate integration patterns

            FORMAT YOUR RESPONSE AS:
            ## Analysis Summary
            [Brief overview of issues found]

            ## Detailed Findings
            ### Issue 1: [Title]
            - **File**: path/to/file.rs:line
            - **Problem**: [Description]
            - **Solution**: [Specific fix]
            - **Code**:
            ```rust
            [suggested code]
            ```

            [Repeat for each issue]

            ## Recommendations
            [General suggestions for preventing similar issues]

      - name: Post analysis as workflow summary
        if: always()
        run: |
          echo "## ðŸ¤– Codex CI Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Codex analysis has been completed. Review the output above for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: This is an automated analysis. Human review is recommended before applying fixes." >> $GITHUB_STEP_SUMMARY
